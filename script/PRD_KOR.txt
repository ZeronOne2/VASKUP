# 특허 분석 RAG 시스템 PRD

# Overview  
특허담당자를 위한 지능형 특허 분석 시스템입니다. 시스템의 핵심 요구사항은 사용자가가 특허리스트를 입력하고, 
특허리스트 각각의 내용을 LLM을 통해 확인하여 응답을 엑셀파일로 확인하는 것입니다. 
특허리스트는 엑셀파일로 제공되며, 특허의 내용을 시스템이 검색하여 특허의 상세 정보를 수집해야 합니다. 
특허의 상세 정보를 기반으로 답변할 수 있도록 문서의 분할/임베딩/검색 기능을 갖추고 고도화된 RAG를 통해 사용자의 질문에 답변합니다.
UI는 한글로 만들어야 합니다.

# 개발순서 및 방법
 - 개발환경 설정 (uv를 이용한 의존성 관리, 필요한 라이브러리는 그때그때 순차적으로 add)
 - Langgraph 설계
 - Langgraph node를 하나 하나 분리해서 만들어 개별적으로 테스트하고 연결하도록 개발해야 한다.
 - Langgraph node 통합
 - Langgraph workflow를 Streamlit 앱에서 구동하도록 wrapping
 - Streamlit 앱 integration 진행

# 실행 방법
- **의존성 설치**: `uv add -r requirements.txt`
- **애플리케이션 실행**: `uv run streamlit run streamlit_app.py`
- **설정 스크립트 실행**: `uv run python setup.py`

# 개발참고용 문서
 - Cursorrule_langgraph.md
 - Cusorrule_langgraph_components.md
 - Cusorrule_langgraph_Streamlit_integration.md

# Core Features  
## 1. 엑셀 파일 업로드 및 처리
- 특허번호가 포함된 엑셀 파일 업로드 기능
- 다양한 엑셀 형식 지원 (.xlsx, .xls, .csv)
- 업로드된 데이터 미리보기 및 검증

## 2. 특허 정보 검색 및 수집
- Google SERP API를 활용한 기본 특허 정보 검색
- 특허번호(예: US11734097B1)를 patent_id 형식(patent/US11734097B1/en)으로 변환
- 특허 제목, 요약, 청구항 자동 추출
- **Description 별도 처리**:
  - SERP API 응답의 `description_link` 추출(예: https://serpapi.com/searches/6582737f15afff70f8cce55a/google_patents_details/description.html)
  - 'description_link'로 웹 스크래핑하여 상세설명 수집
  - `<span class="google-src-text">` 원본 텍스트 제외, 영어 번역본 파싱
  - # 일반적인 문자 깨짐 패턴 수정
        char_fixes = {
            "â€œ": '"',  # 왼쪽 큰따옴표
            "â€": '"',  # 오른쪽 큰따옴표
            "â€™": "'",  # 오른쪽 작은따옴표
            "â€˜": "'",  # 왼쪽 작은따옴표
            'â€"': "–",  # en dash
            'â€"': "—",  # em dash
            "Â": "",  # 불필요한 문자
            "âĂ": '"',  # 또 다른 따옴표 패턴
            "âă": '"',  # 또 다른 따옴표 패턴
        }
- 검색 진행률 표시 및 에러 처리
- API 호출 제한 관리 및 재시도 로직

## 3. 데이터 저장 및 관리
- 수집된 특허 정보를 구조화된 파일로 저장
- 각 특허별 개별 파일 생성 및 관리
- 데이터 중복 제거 및 업데이트 기능
- 저장된 특허 목록 및 상태 관리
- 검색전 기 저장된 특허는 추가검색하지 않도록 필터링

## 4. 벡터스토어 구축
- **특허 문서 청킹 전략**:
  - 제목, 요약, 청구항: 개별 청크로 저장
  - Description: 길이에 따라 적절한 크기로 분할 (1000-1500 토큰 단위)
  - 청크 간 overlap 설정으로 문맥 유지
- 임베딩 생성 및 벡터스토어 저장
- Chroma 또는 FAISS 벡터 데이터베이스 활용
- 특허별/섹션별 메타데이터 태깅
- 검색 성능 최적화: Ensemble retriever, rerank, Multi-Query Retriever, Contextual Compression Retriever 알고리즘 활용
- 벡터스토어에 저장된 특허는 다시 작업하지 않도록 필터링

## 5. 질문 입력 UI
- 사용자 정의 질문 리스트 생성 및 관리
- 질문 템플릿 제공 (특정 기술 관련성 유무 질문, 종래기술의 문제점 질문, 해결하고자하는 과제가 무엇인지?, 발명의 효과, 기술적 차별점을 갖는 핵심 구성요소 등 질문)
- 질문 수정, 삭제 기능

## 6. Advanced Agentic Modular RAG 시스템
- **LangGraph 기반 지능형 워크플로우**:
  - 사용자 질문 분석 및 의도 파악
  - 답변 전략 계획 수립 및 실행. 답변 결과 평가에 따른 전략 수정 (Planning Agent Node)
  - 적합한 검색 쿼리 생성 (Query Generation Node)
  - 다단계 검색 및 정보 수집 (Retrieval Agent Node)
  - 검색 쿼리와 검색 결과의 관련성 평가 및 쿼리 수정 후 재검색 (Grade Document Node)
  - 답변 생성 (Generation Node)
  - 질문과 답변의 관련성 평가 (Relervance Check Node)
  - 검색 결과와 답변의 Halucination 평가 (Halucination Check Node)
  - 답변 결과 종합 평가 (Adaptive Loop)
- **모듈화된 Agent 구조**:
  - Planning Agent: 답변 전략 및 검색 계획 수립

- 각 특허에 대한 개별 질문 수행
- 사용자의 질문에 정확히 답변하기 위한 Retriver 입력용 쿼리 생성
- 검색 결과의 relervance 평가 및 재검색 쿼리 생성 flow 
- 맥락을 고려한 정확한 답변 생성
- 답변 신뢰도 및 근거 제시
- 적절한 recursive 횟수 제한한 

## 7. 결과 출력 및 투명한 분석 과정 제공
- **엑셀 결과 출력**:
  - 원본 엑셀에 질문별 답변 열 추가
  - **새로운 "분석과정" 열**: 각 답변의 상세 분석 과정 링크
- **HTML 분석 리포트 시스템**:
  - 각 질문-답변별 개별 HTML 리포트 파일 생성
  - 엑셀에 HTML 리포트 링크 열 추가
  - 클릭 한 번으로 상세 분석 과정 확인
- **분석 과정 시각화**:
  - Agent 워크플로우 다이어그램
  - 단계별 추론 과정 타임라인
  - 검색된 문서 소스 및 신뢰도
  - 재시도 과정 및 개선 내역
- 결과 파일 다운로드 기능
- 요약 리포트 생성

# User Experience  
## 사용자 페르소나
**주요 사용자**: 특허담당자, IP 분석가, 연구개발팀
- 대량의 특허 분석 업무 담당
- 특허 내 특정 내용 유무 확인, 기술 관련성 확인, 종래기술의 문제점/해결하고자 하는 과제/기술적 차별점을 갖는 핵심 구성요소 파악 필요

## 주요 사용자 플로우
1. **데이터 준비**: 특허번호가 포함된 엑셀 파일 준비
2. **파일 업로드**: CLI/Streamlit 인터페이스를 통한 파일 업로드
3. **데이터 검증**: 업로드된 특허번호 목록 확인
4. **특허 수집**: 자동 특허 정보 검색 및 수집 과정 모니터링
5. **질문 설정**: 분석하고자 하는 질문들 입력
6. **분석 실행**: RAG 시스템을 통한 특허별 질문 수행
7. **결과 확인**: 생성된 답변 검토 및 결과 파일 다운로드

## UI/UX 고려사항
- 직관적인 단계별 워크플로우 제공
- 진행 상황 확인 가능
- 에러 발생 시 명확한 안내 메시지

# Technical Architecture  
## 시스템 구성요소
### 패키지 관리 및 실행 환경
- **uv**: 의존성 관리 및 패키지 설치 도구
- **uv run**: Python 스크립트 실행 관리
- **pyproject.toml**: 프로젝트 의존성 및 설정 관리

### Frontend
- **Streamlit**: 메인 웹 인터페이스
- **Streamlit Components**: 커스텀 UI 컴포넌트

### Backend
- **Python**: 메인 백엔드 로직
- **LangGraph**: Advanced Agentic RAG 워크플로우 오케스트레이션
- **LangChain**: 기본 RAG 컴포넌트 및 도구 통합
- **Agent Framework**: 모듈화된 AI Agent 구조

### 데이터 처리
- **Pandas**: 엑셀 파일 처리 및 데이터 조작
- **SerpAPI**: Google Patents 기본 데이터 검색
- **Requests/BeautifulSoup**: Description 링크 웹 스크래핑
- **OpenAI/HuggingFace**: 텍스트 임베딩 생성
- **JINA_reranker**: 검색결과 재배열열

### 벡터 데이터베이스
- **Chroma**: 벡터스토어 (1차 선택)
- **FAISS**: 대안 벡터스토어

### 파일 시스템
- **로컬 스토리지**: 특허 문서 및 설정 저장
- **임시 파일 관리**: 업로드/다운로드 파일 처리

## API 및 통합
- **SerpAPI Google Patents**: 주요 특허 데이터 소스
  - Engine: "google_patents_details"
  - Patent ID 형식: "patent/{patent_number}/en"
  - API 키 관리 및 호출 제한 준수
- **OpenAI API** 또는 **로컬 LLM 모델**: 임베딩 및 RAG 시스템
- **백업 데이터 소스**: 필요 시 추가 특허 데이터베이스 연동